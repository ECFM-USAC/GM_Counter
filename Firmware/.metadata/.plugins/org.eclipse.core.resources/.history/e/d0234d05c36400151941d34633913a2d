#include <msp430g2553.h>
#include "ports.h"

/*
 * main.c
*/

#define SMCLK_PRESCALER 8

unsigned long MCLK_freq;
unsigned long SMCLK_freq;

unsigned int cnt = 0;

void ioSetup(void);
void interruptSetup(void);
void clkSetup(unsigned int freq);
void setHVFrequency(unsigned int freq);
void timerSetup(void);
void interruptSetup(void);
unsigned int getTACCRfromFreq(unsigned int freq);

int main(void) {
	WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
	ioSetup();
	clkSetup(1); //Set MCLK to 1 MHz. SMCLK is set with a 1:8 prescaler
	timerSetup();
	interruptSetup();
	setHVFrequency(100);
	while(1);
	return 0;
}


void clkSetup(unsigned int freq){  //Frequency given in MHz
    switch(freq){
        case 1:
            BCSCTL1 = CALBC1_1MHZ;
            DCOCTL  = CALDCO_1MHZ;
            break;

        case 8:
            BCSCTL1 = CALBC1_8MHZ;
            DCOCTL  = CALDCO_8MHZ;
            break;

        case 12:
            BCSCTL1 = CALBC1_12MHZ;
            DCOCTL  = CALDCO_12MHZ;
            break;

        case 16:
            BCSCTL1 = CALBC1_16MHZ;
            DCOCTL  = CALDCO_16MHZ;
            break;

        default:
            BCSCTL1 = CALBC1_1MHZ;
            DCOCTL  = CALDCO_1MHZ;
            freq    = 1;
    }
    //BCSCTL2 |= 0x06; //1:8 Prescaler for SMCLK
    MCLK_freq = freq * 1000000;
    SMCLK_freq = MCLK_freq / SMCLK_PRESCALER;
}

void timerSetup(void){
    TA0CTL = TASSEL_2 + ID_0 + MC_1 + TACLR;
    TA0CCTL1 = OUTMOD_7;
}

void interruptSetup(void){
    P1IES |=  PUSH_BTN; //Descending edge for interrupt detection on PUSH_BTN
    P1IFG &= ~PUSH_BTN; //Clear PUSH_BTN interrupt flag before enabling it
    P1IE  |=  PUSH_BTN; //Enable PUSH_BTN interrupt
    //TACCTL0 = CCIE; //TACCR0 Interrupt Enable
    _BIS_SR(GIE); //General interrupts enable
}

//------ Compute TACCR0 counter limit based on desired frequency output -------
unsigned int getTACCRfromFreq(unsigned int freq){ //Input frequency in Hz
    //As frequencies are low enough, no prescaler has been set
    unsigned long cval;
    cval = (SMCLK_freq)/(freq) - 1;
    return (cval <= 65535)?(unsigned int)cval:65535; //Ranging from 31Hz to 1MHz. :) NICE!
}


// ------ Set frequency for HV operation -------------
void setHVFrequency(unsigned int freq){ //Frequency given in Hz
    TACCR0 = getTACCRfromFreq(freq);
    //TACCR1 = TACCR0 / 2;
    TACCR1 = 1;
}


void ioSetup(void){
    P1DIR  =  0x00;
    P1DIR |=  (BIT0 + BIT2 + BIT6); //LED_OK + FREQ_OUT + SOUND_OUT
    P1DIR &= ~PUSH_BTN; //INPUT
    P1OUT  =  SOUND_OUT;  //Speaker tied to VDD, so HIGH is default state
    P1REN  =  PUSH_BTN; //Enable pull-U/D restitor capabilities on PUSH_BTN
    P1OUT |=  PUSH_BTN; //Pull-up
    P1SEL |=  FREQ_OUT; //PWM Output for HV Frequency Generator

    P2DIR  =  0x00;
    P2DIR &= ~PULSE_IN; //Input pulses
    P2REN  = 0x00; //Disable pull-up/down resistor
}


#pragma vector = PORT1_VECTOR
__interrupt void PORT1_ISR(void){
	if(P1IFG & BIT3){ //PUSH BUTTON
		P1IFG &= ~PUSH_BTN;
		cnt++;
	}
}




//TIMER0_A0 Interrupts aren't used to toggle HV pin any more
/*
#pragma vector = TIMER0_A0_VECTOR
__interrupt void TACCR0_ISR(void){<
    //CCR0 used for HV frequency generator
    //if(TACCTL0 & CCIFG){ //TACCTL0 Interrupt Flag
    if(CCIFG){ //TACCTL0 Interrupt Flag
        //P1OUT ^= FREQ_OUT; //Toggle corresponding pin
        ++cnt;
    }
    //CCIFG is automatically cleared
}
*/
